
Padrão MVC
	O MVC é um padrão de arquitetura que divide a aplicação em três camadas: a visão(view), o
	modelo(model) e o controlador(controller)
	
	O MVC é um padrão muito utilizado devido a sua arquitetura que possibilita separar o projeto em camadas
	onde cada uma delas executa o que lhe é definido e nada mais.
	
	Esse padrão pode ser aplicado em diversos tipos de projetos como, por exemplo, desktop,web e mobile.
	
	O MVC traz como benefício o isolamento das regras de negócios da interface do usuário, o que permite que exista 
	várias interfaces de usuário que podem ser modifcadas sem afetar a regra do negócio.
	
	
	Model:
		É a camada responsável  pela leitura e escrita de dados, e também de suas validações.
		
	View:
		É a camada de interações com o usuário. Ela apenas faz a exibição dos dados, sendo ela por meio de um HTML ou XML.
		
	Controller:
		É a camada responsável por receber todas as requisições e por controlar qual model usar e qual view será mostrado
		ao usuário.
	
	
	ASP.NET Web Forms
		No modelo ASP.NET Web Forms as requisições do navegador eram enviados para pagínas, que deveriam existir fisicamente,
		com isso cada URL deveria ter uma página física que a represente. 
		
	ASP.NET MVC
		Ja no modelo ASP.NET MVC as requisições do navegador são enviados para uma Ação da Controller. tirando a necessidade 
		de cada URL possuir um arquivo físico.
	
	Routes
		Quando uma aplicação ASP.NET MVC é criado já é configurado um padrão de rota default:
		EX:
			URL: "{controller}/{action}/{id}",
			default: new { controller = "Home", action = "Index", id = UrlParameter.Optional
			
		Essse padrão já atende a maioria das necessidades, porém é possível criar padrões personalizados.
	
	Custom Routes
		Para determinadas necessidades podemos criar rotas personalizadas, isso permite uma maior flexibilidade e que seja
		possível gerar URLs mais amigáveis para o usuário o que torna a aplicação mais acessível.
		EX:
			URL: "student/{id}/{name}/{standardid}",
			defaults: new {controller = "Studant, action = "Index", id = UrlParameter.Optional, name = UrlParameter.Optional, 
			standardid = UrlParameter.Optional },
			
			
	EXEMPLO
	
		exemplo de uma URL utilizando a rota default:
				http://localhost:1234/home/index/100
										|	|	  |		
										|	|     |> parametro
										|	|> metodo/action
										|> controller
				
				
				http://localhost:1234/home/index
										|	|	  		
										|	|     
										|	|> metodo/action
										|> controller
	
	
	Dinifição Action Result
	
		O Action Result é o resultado de uma ação processada por uma controller, o action result possui diversos tipos.
		
				TIPOS:
					Segue uma relação do Action Results, usaremos alguns deles na criação da nossa aplicação.:
					
									Content Returning Results
											ViewResult	ContentResult
											PartialViewResult	EmptyResult
											FileResult	JsonResult
												JavaScriptResult
												
									Redirection Result
										RedirectionResult	RedirectToRouteResult
										
									Status Results
										HttpStatusCodeResult	HttpUnauthorizedResult
											HttpNotFoundResult
											
	HTTP Verbs O que são?
	
		Os HTTP verbs são métodos do protocolo http que informam ao servidor qual ação ele deve executar
		
						GET : Buscar recursos/ cache
						POST : criar um novo recurso
						PUT/PATCH : atualizar um recurso existente
						DELETE : Remover um recurso. 
	
	Razor:
		O razor é uma View Engine utilizada no ASP.NET MVC. O seu principal objetivo é simplificar o desenvolvimento de
		aplicações  ASP.NET pois ele deixa o codigo mais simples, fácil e legível.
	
	Middlewares
		Middlewares são componentes(classes) que é executados em todas as solicitações na aplicação ASP.NET.
		Normalmente existem vários middlewares na aplicação e nós definimos a ordem em que são executados.
		Cada middleware adiciona ou modifica a solicitação http e pode passar o controle para o proximo middleware.
		
	EXEMPLO: 
					Middleware 1				Middleware 2				Middleware 2
			Request 	modify Request
							next(); -----------> modify Request
													next(); --------------> modify Request ----> App Code
			Response 	Modify response <------ Modify response <------    Modify response <-------/
			
			
	
	Startup
		Como o próprio nome diz, a classe Startup.cs é responsável por ser o ponto inicial do projeto. Dentro dela 
		existem métodos que são responsáveis por configurarem o projeto. São eles:
			CunfigureServices
					O método ConfigureSerices é responsável por registrar as classes ao contêiner de injeção de dependência,
					após isso a classe poderá ser usada em qualquer lugar da aplicação desde que seja incluída no construtor
					da classe em que deseja usar.
					
			Configure
				O Configure controla o pipeline da aplicação, é nesse método que são especificados os middlewares que serão
				ulizados. Se nada for colocado nesse método nem o MVC funcionará pois não foi indicado a aplicação o que utilizar.
				Deve ser adicionado apenas os middlewares que forem ser utlizados caso contrário poderá acontecer a perda 
				de performace.